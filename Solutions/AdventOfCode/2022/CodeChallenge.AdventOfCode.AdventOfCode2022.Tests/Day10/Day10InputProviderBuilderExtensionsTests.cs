namespace CodeChallenge.AdventOfCode.AdventOfCode2022.Tests.Day10;

using CodeChallenge.AdventOfCode.AdventOfCode2022.Day10;
using CodeChallenge.AdventOfCode.AdventOfCode2022.Day10.Models;
using CodeChallenge.Core.IO;

public class Day10InputProviderBuilderExtensionsTests
{
    private readonly Mock<IInputReader<AdventOfCodeChallengeSelection>> _inputReaderMock;
    private readonly IInputProviderBuilder<AdventOfCodeChallengeSelection> _inputProviderBuilder;

    public Day10InputProviderBuilderExtensionsTests()
    {
        _inputReaderMock = new Mock<IInputReader<AdventOfCodeChallengeSelection>>();
        _inputProviderBuilder = new InputProviderBuilder<AdventOfCodeChallengeSelection>(_inputReaderMock.Object);
    }

    [Fact]
    public async Task GetInputAsync_GivenSampleInput_ParsesInstructions()
    {
        // Arrange
        var input = new[]
        {
            "addx 15",
            "addx -11",
            "addx 6",
            "addx -3",
            "addx 5",
            "addx -1",
            "addx -8",
            "addx 13",
            "addx 4",
            "noop",
            "addx -1",
            "addx 5",
            "addx -1",
            "addx 5",
            "addx -1",
            "addx 5",
            "addx -1",
            "addx 5",
            "addx -1",
            "addx -35",
            "addx 1",
            "addx 24",
            "addx -19",
            "addx 1",
            "addx 16",
            "addx -11",
            "noop",
            "noop",
            "addx 21",
            "addx -15",
            "noop",
            "noop",
            "addx -3",
            "addx 9",
            "addx 1",
            "addx -3",
            "addx 8",
            "addx 1",
            "addx 5",
            "noop",
            "noop",
            "noop",
            "noop",
            "noop",
            "addx -36",
            "noop",
            "addx 1",
            "addx 7",
            "noop",
            "noop",
            "noop",
            "addx 2",
            "addx 6",
            "noop",
            "noop",
            "noop",
            "noop",
            "noop",
            "addx 1",
            "noop",
            "noop",
            "addx 7",
            "addx 1",
            "noop",
            "addx -13",
            "addx 13",
            "addx 7",
            "noop",
            "addx 1",
            "addx -33",
            "noop",
            "noop",
            "noop",
            "addx 2",
            "noop",
            "noop",
            "noop",
            "addx 8",
            "noop",
            "addx -1",
            "addx 2",
            "addx 1",
            "noop",
            "addx 17",
            "addx -9",
            "addx 1",
            "addx 1",
            "addx -3",
            "addx 11",
            "noop",
            "noop",
            "addx 1",
            "noop",
            "addx 1",
            "noop",
            "noop",
            "addx -13",
            "addx -19",
            "addx 1",
            "addx 3",
            "addx 26",
            "addx -30",
            "addx 12",
            "addx -1",
            "addx 3",
            "addx 1",
            "noop",
            "noop",
            "noop",
            "addx -9",
            "addx 18",
            "addx 1",
            "addx 2",
            "noop",
            "noop",
            "addx 9",
            "noop",
            "noop",
            "noop",
            "addx -1",
            "addx 2",
            "addx -37",
            "addx 1",
            "addx 3",
            "noop",
            "addx 15",
            "addx -21",
            "addx 22",
            "addx -6",
            "addx 1",
            "noop",
            "addx 2",
            "addx 1",
            "noop",
            "addx -10",
            "noop",
            "noop",
            "addx 20",
            "addx 1",
            "addx 2",
            "addx 2",
            "addx -6",
            "addx -11",
            "noop",
            "noop",
            "noop"
        };
        _inputReaderMock.Setup(x => x.GetInputAsync(It.IsAny<AdventOfCodeChallengeSelection>()))
            .ReturnsAsync(string.Join("\n", input));

        // Act
        var result = await _inputProviderBuilder.BuildDay10InputProvider()
            .GetInputAsync(new AdventOfCodeChallengeSelection(0, 0, 0))
            .ConfigureAwait(false);

        // Assert
        var expected = new Instruction[]
        {
            new AddXInstruction(15),
            new AddXInstruction(-11),
            new AddXInstruction(6),
            new AddXInstruction(-3),
            new AddXInstruction(5),
            new AddXInstruction(-1),
            new AddXInstruction(-8),
            new AddXInstruction(13),
            new AddXInstruction(4),
            new NoOpInstruction(),
            new AddXInstruction(-1),
            new AddXInstruction(5),
            new AddXInstruction(-1),
            new AddXInstruction(5),
            new AddXInstruction(-1),
            new AddXInstruction(5),
            new AddXInstruction(-1),
            new AddXInstruction(5),
            new AddXInstruction(-1),
            new AddXInstruction(-35),
            new AddXInstruction(1),
            new AddXInstruction(24),
            new AddXInstruction(-19),
            new AddXInstruction(1),
            new AddXInstruction(16),
            new AddXInstruction(-11),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(21),
            new AddXInstruction(-15),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(-3),
            new AddXInstruction(9),
            new AddXInstruction(1),
            new AddXInstruction(-3),
            new AddXInstruction(8),
            new AddXInstruction(1),
            new AddXInstruction(5),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(-36),
            new NoOpInstruction(),
            new AddXInstruction(1),
            new AddXInstruction(7),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(2),
            new AddXInstruction(6),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(1),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(7),
            new AddXInstruction(1),
            new NoOpInstruction(),
            new AddXInstruction(-13),
            new AddXInstruction(13),
            new AddXInstruction(7),
            new NoOpInstruction(),
            new AddXInstruction(1),
            new AddXInstruction(-33),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(2),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(8),
            new NoOpInstruction(),
            new AddXInstruction(-1),
            new AddXInstruction(2),
            new AddXInstruction(1),
            new NoOpInstruction(),
            new AddXInstruction(17),
            new AddXInstruction(-9),
            new AddXInstruction(1),
            new AddXInstruction(1),
            new AddXInstruction(-3),
            new AddXInstruction(11),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(1),
            new NoOpInstruction(),
            new AddXInstruction(1),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(-13),
            new AddXInstruction(-19),
            new AddXInstruction(1),
            new AddXInstruction(3),
            new AddXInstruction(26),
            new AddXInstruction(-30),
            new AddXInstruction(12),
            new AddXInstruction(-1),
            new AddXInstruction(3),
            new AddXInstruction(1),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(-9),
            new AddXInstruction(18),
            new AddXInstruction(1),
            new AddXInstruction(2),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(9),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(-1),
            new AddXInstruction(2),
            new AddXInstruction(-37),
            new AddXInstruction(1),
            new AddXInstruction(3),
            new NoOpInstruction(),
            new AddXInstruction(15),
            new AddXInstruction(-21),
            new AddXInstruction(22),
            new AddXInstruction(-6),
            new AddXInstruction(1),
            new NoOpInstruction(),
            new AddXInstruction(2),
            new AddXInstruction(1),
            new NoOpInstruction(),
            new AddXInstruction(-10),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(20),
            new AddXInstruction(1),
            new AddXInstruction(2),
            new AddXInstruction(2),
            new AddXInstruction(-6),
            new AddXInstruction(-11),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new NoOpInstruction()
        };
        Assert.Equal(expected, result);
    }
}