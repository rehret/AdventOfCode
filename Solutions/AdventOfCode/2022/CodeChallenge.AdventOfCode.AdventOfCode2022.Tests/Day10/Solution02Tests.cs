namespace CodeChallenge.AdventOfCode.AdventOfCode2022.Tests.Day10;

using CodeChallenge.AdventOfCode.AdventOfCode2022.Day10;
using CodeChallenge.AdventOfCode.AdventOfCode2022.Day10.Models;
using CodeChallenge.Core.IO;

public class Solution02Tests
{
    private readonly Solution02 _solution;

    public Solution02Tests()
    {
        var inputReaderMock = new Mock<IInputReader<AdventOfCodeChallengeSelection>>();
        var inputProviderBuilder = new InputProviderBuilder<AdventOfCodeChallengeSelection>(inputReaderMock.Object);
        _solution = new Solution02(inputProviderBuilder);
    }

    [Fact]
    public async Task ComputeSolutionAsync_WithSampleInput_ProducesSampleOutput()
    {
        // Arrange
        var input = new Instruction[]
        {
            new AddXInstruction(15),
            new AddXInstruction(-11),
            new AddXInstruction(6),
            new AddXInstruction(-3),
            new AddXInstruction(5),
            new AddXInstruction(-1),
            new AddXInstruction(-8),
            new AddXInstruction(13),
            new AddXInstruction(4),
            new NoOpInstruction(),
            new AddXInstruction(-1),
            new AddXInstruction(5),
            new AddXInstruction(-1),
            new AddXInstruction(5),
            new AddXInstruction(-1),
            new AddXInstruction(5),
            new AddXInstruction(-1),
            new AddXInstruction(5),
            new AddXInstruction(-1),
            new AddXInstruction(-35),
            new AddXInstruction(1),
            new AddXInstruction(24),
            new AddXInstruction(-19),
            new AddXInstruction(1),
            new AddXInstruction(16),
            new AddXInstruction(-11),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(21),
            new AddXInstruction(-15),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(-3),
            new AddXInstruction(9),
            new AddXInstruction(1),
            new AddXInstruction(-3),
            new AddXInstruction(8),
            new AddXInstruction(1),
            new AddXInstruction(5),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(-36),
            new NoOpInstruction(),
            new AddXInstruction(1),
            new AddXInstruction(7),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(2),
            new AddXInstruction(6),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(1),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(7),
            new AddXInstruction(1),
            new NoOpInstruction(),
            new AddXInstruction(-13),
            new AddXInstruction(13),
            new AddXInstruction(7),
            new NoOpInstruction(),
            new AddXInstruction(1),
            new AddXInstruction(-33),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(2),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(8),
            new NoOpInstruction(),
            new AddXInstruction(-1),
            new AddXInstruction(2),
            new AddXInstruction(1),
            new NoOpInstruction(),
            new AddXInstruction(17),
            new AddXInstruction(-9),
            new AddXInstruction(1),
            new AddXInstruction(1),
            new AddXInstruction(-3),
            new AddXInstruction(11),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(1),
            new NoOpInstruction(),
            new AddXInstruction(1),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(-13),
            new AddXInstruction(-19),
            new AddXInstruction(1),
            new AddXInstruction(3),
            new AddXInstruction(26),
            new AddXInstruction(-30),
            new AddXInstruction(12),
            new AddXInstruction(-1),
            new AddXInstruction(3),
            new AddXInstruction(1),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(-9),
            new AddXInstruction(18),
            new AddXInstruction(1),
            new AddXInstruction(2),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(9),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(-1),
            new AddXInstruction(2),
            new AddXInstruction(-37),
            new AddXInstruction(1),
            new AddXInstruction(3),
            new NoOpInstruction(),
            new AddXInstruction(15),
            new AddXInstruction(-21),
            new AddXInstruction(22),
            new AddXInstruction(-6),
            new AddXInstruction(1),
            new NoOpInstruction(),
            new AddXInstruction(2),
            new AddXInstruction(1),
            new NoOpInstruction(),
            new AddXInstruction(-10),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new AddXInstruction(20),
            new AddXInstruction(1),
            new AddXInstruction(2),
            new AddXInstruction(2),
            new AddXInstruction(-6),
            new AddXInstruction(-11),
            new NoOpInstruction(),
            new NoOpInstruction(),
            new NoOpInstruction()
        };

        // Act
        var result = await _solution.ComputeSolutionAsync(input).ConfigureAwait(false);

        // Assert
        var expectedResult = string.Join("\n",
            "##..##..##..##..##..##..##..##..##..##..",
            "###...###...###...###...###...###...###.",
            "####....####....####....####....####....",
            "#####.....#####.....#####.....#####.....",
            "######......######......######......####",
            "#######.......#######.......#######.....");
        Assert.Equal(expectedResult, result);
    }
}